他媽的 要改ㄩ
$cd <workdir>openbmc/meta-evb/meta-evb-raspberrypi/conf
$tree -L 1
.
├── layer.conf
└── templates
改成這樣


TEMPLATECONF=meta-evb/meta-evb-raspberrypi/conf/templates/default . openbmc-env ../bmcrpi_build

/home/macd/RPI4_BMC/openbmc/meta-evb/meta-evb-raspberrypi/conf/templates/default
host 端
sudo dd if=obmc-phosphor-image-raspberrypi4-64-20250206132816.rootfs.rpi-sdimg of=/dev/sda status=progress

帳密: 
root 
0penBmc

wify 功能不能用






問題1 不知道能不能使用uart print 訊息出來 
關閉版載藍芽
echo "dtoverlay=disable-bt" | sudo tee -a /boot/config.txt

問題2 構建好 wify ssh 功能但不知道功能可不可以


問題3  
// edit cmdline.txt
// and
ip = 192.168.137.72
// edit config.txt
start_x=1
gpu_mem=128
enable_uart=1
dtoverlay=w1-gpio
上面這些東西還沒改上去


還要  bitbake 出來  /home/mac/RPI4_BMC/openbmc/bmcrpi_build/tmp/deploy/images/raspberrypi4-64/bootfiles
cmdline.txt
config.txt

還要修改


樹梅派接線參考
https://piepie.com.tw/1999/connect-to-raspberry-pi-via-serial



參考連結
https://blog.csdn.net/qq_20050959/article/details/108163331


meta-phosphor/classes/image_types_phosphor.bbclass   
中的參數要改 改像下面這樣
# Flash characteristics in KB unless otherwise noted
DISTROOVERRIDES .= ":flash-${FLASH_SIZE}"
FLASH_SIZE ?= "131072"  
FLASH_PEB_SIZE ?= "64"
# Flash page and overhead sizes in bytes
FLASH_PAGE_SIZE ?= "1"
FLASH_NOR_UBI_OVERHEAD ?= "64"

# Fixed partition offsets
FLASH_UBOOT_SPL_SIZE ?= "1024"
FLASH_UBOOT_OFFSET ?= "0"
FLASH_KERNEL_OFFSET ?= "1024"
FLASH_KERNEL_OFFSET:flash-65536 ?= "1024"
FLASH_KERNEL_OFFSET:flash-131072 ?= "1024"
FLASH_UBI_OFFSET ?= "${FLASH_KERNEL_OFFSET}"
FLASH_ROFS_OFFSET ?= "12288" 
# FLASH_ROFS_OFFSET:flash-65536 ?= "10240"
# FLASH_ROFS_OFFSET:flash-131072 ?= "10240"
FLASH_RWFS_OFFSET ?= "98304" 
#FLASH_RWFS_OFFSET:flash-65536 ?= "43008"
#FLASH_RWFS_OFFSET:flash-131072 ?= "98304"

https://blog.csdn.net/qq_24622489/article/details/136710244



############################ Add by tao #######################################
IMAGE_FSTYPES = "ext4.xz rpi-sdimg"
SDIMG_ROOTFS_TYPE="ext4.xz"

## enable uart
ENABLE_UART="1"
 
## packages
IMAGE_INSTALL:append = " openssh-sftp-server sudo python3 python3-pip rpi-gpio raspi-gpio"
IMAGE_FEATURES:append = " ssh-server-openssh"
 
## systemd settings
DISTRO_FEATURES:append = " systemd"
VIRTUAL-RUNTIME_init_manager = "systemd"
DISTRO_FEATURES_BACKFILL_CONSIDERED:append = " sysvinit"
VIRTUAL-RUNTIME_initscripts = "systemd-compat-units"
########################### End by tao ########################################



do_build                              Default task for a recipe - depends on all other normal tasks required to 'build' a recipe
do_checkuri                           Validates the SRC_URI value
do_clean                              Removes all output files for a target
do_cleanall                           Removes all output files, shared state cache, and downloaded source files for a target
do_cleansstate                        Removes all output files and shared state cache for a target
do_compile                            Compiles the source in the compilation directory
do_configure                          Configures the source by enabling and disabling any build-time and configuration options for the software being built
do_deploy_source_date_epoch           
do_deploy_source_date_epoch_setscene   (setscene version)
do_devshell                           Starts a shell with the environment set up for development/debugging
do_fetch                              Fetches the source code
do_install                            Copies files from the compilation directory to a holding area
do_listtasks                          Lists all defined tasks for a target
do_package                            Analyzes the content of the holding area and splits it into subsets based on available packages and files
do_package_qa                         Runs QA checks on packaged files
do_package_qa_setscene                Runs QA checks on packaged files (setscene version)
do_package_setscene                   Analyzes the content of the holding area and splits it into subsets based on available packages and files (setscene version)
do_package_write_deb                  Creates the actual DEB packages and places them in the Package Feed area
do_package_write_deb_setscene         Creates the actual DEB packages and places them in the Package Feed area (setscene version)
do_packagedata                        Creates package metadata used by the build system to generate the final packages
do_packagedata_setscene               Creates package metadata used by the build system to generate the final packages (setscene version)
do_patch                              Locates patch files and applies them to the source code
do_populate_lic                       Writes license information for the recipe that is collected later when the image is constructed
do_populate_lic_setscene              Writes license information for the recipe that is collected later when the image is constructed (setscene version)
do_populate_sysroot                   Copies a subset of files installed by do_install into the sysroot in order to make them available to other recipes
do_populate_sysroot_setscene          Copies a subset of files installed by do_install into the sysroot in order to make them available to other recipes (setscene version)
do_prepare_recipe_sysroot             
do_pydevshell                         Starts an interactive Python shell for development/debugging
do_unpack                             Unpacks the source code into a working directory